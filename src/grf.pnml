// GRF definition block
grf {
	grfid: "brv2"; // BRTrains v2, based on BRTrains, BROS, and the Modern UK Trains set (addon to BRTrains)
	name: string(STR_GRF_NAME);
	desc: string(STR_GRF_DESC);
	// Remove the "2." from the "real" version, eg v2.8 becomes 9
	// 9 (2.9) released BaNaNaS 2024-05-18T01:56:17
	version: 10;
	//bump up this number to whatever the "next release" version is when breaking compatibility.
	// Eg if 8 (2.8) has released and the next version is 9 (2.9) then set it to 9
	min_compatible_version: 10;
	param 0 {
		param_max_speed {
			type: int;
			name: string(STR_PARAM_MAX_SPEED);
			desc: string(STR_PARAM_MAX_SPEED_DESC);
			min_value: 0;
			max_value: 1;
			def_value: 0;
			names: {
				0: string(STR_PARAM_MAX_SPEED_SERVICE);
				1: string(STR_PARAM_MAX_SPEED_DESIGN);
			};
		}
	}
	param 1 {		
		param_dev_mode{
			name: string(STR_PARAM_NAME_DEV);
			desc: string(STR_PARAM_DESC_DEV);
			min_value: 0;
			max_value: 1;
			def_value: 0;
			names: {
				0: string(STR_PARAM_DEV_OFF);
				1: string(STR_PARAM_DEV_ON);
			};
		}
	}
	param 2 {
		param_sounds{
			name: string(STR_PARAM_NAME_SOUNDS);
			desc: string(STR_PARAM_DESC_SOUNDS);
			min_value: 0;
			max_value: 1;
			def_value: 1;
			names: {
				0: string(STR_PARAM_SOUNDS_OFF);
				1: string(STR_PARAM_SOUNDS_ON);
			};
		}
	}
	param 3 {		
		param_simple_mode{
			name: string(STR_PARAM_NAME_SIMPLE);
			desc: string(STR_PARAM_DESC_SIMPLE);
			min_value: 0;
			max_value: 1;
			def_value: 0;
			names: {
				0: string(STR_PARAM_COMPLEX);
				1: string(STR_PARAM_SIMPLE);				
			};
		}
	}
	param 4 {
		param_pax{
			name: string(STR_PARAM_NAME_PAX_MULTIPLIER);
			desc: string(STR_PARAM_DESC_PAX_MULTIPLIER);
			min_value: 1;
			max_value: 4;
			def_value: 1;
			names: {
				1: string(STR_PARAM_1X);
				2: string(STR_PARAM_2X);
				3: string(STR_PARAM_3X);
				4: string(STR_PARAM_4X);
			};
		}
	}
	param 5 {
			param_cost_factor{
				name: string(STR_PARAM_NAME_COST_MULTIPLIER);
				desc: string(STR_PARAM_DESC_COST_MULTIPLIER);
				min_value: 1;
				max_value: 5;
				def_value: 3;
				names: {
					1: string(STR_PARAM_QUARTER);
					2: string(STR_PARAM_HALF);
					3: string(STR_PARAM_1X);
					4: string(STR_PARAM_2X);										
					5: string(STR_PARAM_4X);
				};
			}
		}
	param 6 {
			param_tram{
				name: string(STR_PARAM_NAME_TRAM);
				desc: string(STR_PARAM_DESC_TRAM);
				min_value: 0;
				max_value: 5;
				def_value: 1;
				names: {
					0: string(STR_TRAM_DEFAULT);
					1: string(STR_TRAM_TRAINONLY);
					2: string(STR_TRAM_TRAMONLY);
					3: string(STR_TRAM_BOTH);
					4: string(STR_TRAM_EXTRA);
					5: string(STR_TRAM_SUPEREXTRA);
				};
			}
	}		
	param 7 {
			param_2cc{
				name: string(STR_PARAM_NAME_2CC);
				desc: string(STR_PARAM_DESC_2CC);
				min_value: 0;
				max_value: 2;
				def_value: 1;
				names: {
					0: string(STR_NO_2CC);
					1: string(STR_USE_2CC);
					2: string(STR_ONLY_2CC);
				};
			}
	}
}
disable_item(FEAT_TRAINS);

if(param["BRT\16", 1] != 0)
{
	error(ERROR,string(STR_Error_MUTSBRTrains));
	deactivate("BRT\16");
}


if(param["MUKT", 1] != 0)
{
	error(ERROR,string(STR_Error_MUTSBRTrains));
	deactivate("MUKT");
}

if(param["RUKT", 1] != 0)
{
	error(ERROR,string(STR_Error_RUKTS));
}

switch(FEAT_TRAINS, SELF, GetAdjustedCost, base, param_cost_factor) {
  1: return base / 4;
  2: return base / 2;
  3: return base;
  4: return base * 2;
  5: return base * 4;
}

switch(FEAT_ROADVEHS, SELF, GetAdjustedCostTRAM, base, param_cost_factor) {
  1: return base / 4;
  2: return base / 2;
  3: return base;
  4: return base * 2;
  5: return base * 4;
}