spriteset(spriteset_BR67_Purchase, "gfx/BR67_v2.png") {
	template_purchase(0, 0)
}

spriteset(spriteset_BR67_EWS, "gfx/BR67_v2.png") {
	template_train32px_old(0, 13)
}

spriteset(spriteset_BR67_Colas, "gfx/BR67_v2.png") {
	template_train32px_old(0, 38)
}

spriteset(spriteset_BR67_ATW, "gfx/BR67_v2.png") {
	template_train32px_old(0, 63)
}

spriteset(spriteset_BR67_DBSchenker, "gfx/BR67_v2.png") {
	template_train32px_old(0, 88)
}

spriteset(spriteset_BR67_Caledonian, "gfx/BR67_v2.png") {
	template_train32px_old(0, 113)
}

spriteset(spriteset_BR67_RoyalClaret, "gfx/BR67_v2.png") {
	template_train32px_old(0, 138)
}

spriteset(spriteset_BR67_BrownPullman, "gfx/BR67_v2.png") {
	template_train32px_old(0, 163)
}

spriteset(spriteset_BR67_Wrexham, "gfx/BR67_v2.png") {
	template_train32px_old(0, 188)
}

spriteset(spriteset_BR67_DBCompany, "gfx/BR67_v2.png") {
	template_train32px_old(0, 213)
}

// This switch called when displaying as this locomotive
// WARNING: If editing this, also edit PushPull.pnml in the Spritesets folder
switch(FEAT_TRAINS,SELF, sw_BR67,cargo_subtype){
    0:	spriteset_BR67_EWS;
	1:	spriteset_BR67_Colas;
	2: 	spriteset_BR67_ATW;
	3:	spriteset_BR67_DBSchenker;
	4:	spriteset_BR67_Caledonian;
	5:	spriteset_BR67_RoyalClaret;
	6:	spriteset_BR67_BrownPullman;
	7:	spriteset_BR67_Wrexham;
	8:  spriteset_BR67_DBCompany;
}

switch(FEAT_TRAINS,SELF,sw_BR67_cargo_subtype_text,cargo_subtype){
    0:	return string(str_EWSRed);
	1:	return string(str_ColasRail);
	2: 	return string(str_ArrivaWales);
	3:	return string(str_DBSchenker);
	4:	return string(str_CaledonianSleeper);
	5:	return string(str_RoyalClaret);
	6:	return string(str_PullmanBrown);
	7:	return string(str_Wrexham);
	8:	return string(str_DBSCompany);
       return CB_RESULT_NO_TEXT;
}

// If the rear of this consist is a compatible Driving Trailer, call that vehicles's remote sprite call switch
switch(FEAT_TRAINS, PARENT, sw_BR67_PushPUll, [STORE_TEMP(num_vehs_in_consist - 1, 0x10F), var[0x61, 0, 0x0000FFFF, 0xC6]]) {	
	586: sw_PUSHPULL_LocomotiveAsMk3DVT; // Mk3 DVT
	585: sw_PUSHPULL_LocomotiveAsMk4DVT; // Mk4 DVT
	sw_BR67; // No compatible locomotive found, show normal sprites
}

switch(FEAT_TRAINS,PARENT,sw_BR67_CheckPosition, position_in_consist){
    0: sw_BR67_PushPUll; // Attempt push pull
	sw_BR67; // We aren't at the front of the consist, show normal sprites
}

switch(FEAT_TRAINS,PARENT,sw_BR67_Sprites ,vehicle_is_reversed){
    0:	sw_BR67; // We're heading foward, show normal sprites
	1:	sw_BR67_CheckPosition; // Attempt push pull
}

item (FEAT_TRAINS, item_BR67, 151) {
	property {
		name: 							string(STR_NAME_BR67);
		climates_available: 			ALL_CLIMATES;
		introduction_date:				date(1999,4,21);
		model_life:						VEHICLE_NEVER_EXPIRES;
		retire_early:					1;
		vehicle_life:					70;
		reliability_decay:				7;
		refittable_cargo_classes:		0;
		cargo_allow_refit:				[GOOD, FOOD];
		loading_speed:					3;
		cost_factor:					42;
		running_cost_factor:			39;
		sprite_id:						SPRITE_ID_NEW_TRAIN;
		speed:							125 mph;
		refit_cost:						0;
		track_type:						RAIL;
		ai_special_flag:				AI_FLAG_CARGO;
		power:							3200 hp;
		running_cost_base:				RUNNING_COST_DIESEL;
		dual_headed:					0;
		default_cargo_type:				GOOD;
		cargo_capacity:					1;
		weight:							90 ton;
		engine_class:					ENGINE_CLASS_DIESEL;
		tractive_effort_coefficient:	0.31;
		air_drag_coefficient:			0.1;
		length:							8;
		effect_spawn_model_and_powered:	EFFECT_SPAWN_MODEL_DIESEL;
		extra_weight_per_wagon:			0;
		bitmask_vehicle_info:			0;
	}
	graphics {
	additional_text:					return(string(str_purchase_loco_with_liveries,string(str_purchase_type_diesel),string(str_BR67_usage),string(str_BR67_eos),string(str_BR67_liveries)));
	can_attach_wagon:					CB_RESULT_ATTACH_ALLOW;
	cargo_capacity:						return 0;
	cargo_subtype_text:					sw_BR67_cargo_subtype_text;
	default: 							sw_BR67_Sprites;
	purchase:							spriteset_BR67_Purchase;
	colour_mapping: 					return PALETTE_CC_FIRST;
	create_effect:						diesel_create_visual_effect;
	sound_effect:						sw_sound_diesel_66;
	cost_factor:	return(GetAdjustedCost(42));
	running_cost_factor: return(GetAdjustedCost(39));
}
}