// Choose sprites depending on car position
switch(FEAT_TRAINS, SELF, switch_br730_2_spriteset_LNWR, position_in_articulated_veh % 5) {
	0: spriteset_br730_front_LNWR;
	2: spriteset_br730_middlepanto_LNWR;
	4: spriteset_br730_rear_LNWR;
	spriteset_br730_middle_LNWR;
}

switch(FEAT_TRAINS, SELF, switch_br730_2_spriteset, cargo_subtype) {
	0: switch_br730_2_spriteset_LNWR;	
}

switch(FEAT_TRAINS, SELF, switch_br730_2_subtype_text, cargo_subtype) {
	0: return string(str_LNWR);	
	return CB_RESULT_NO_TEXT;
}

// Define articulations
switch(FEAT_TRAINS, SELF, switch_br730_2_articulated, extra_callback_info1) {
	// extra_callback_info1 returns the car number, so 1 is the second car, 2 the third, .. so on
	// The callback runs this switch until it returns NO_MORE_ARTICULATED_PARTS, which ends the growth
	1..4: return item_br730_2;
	return CB_RESULT_NO_MORE_ARTICULATED_PARTS; // Stop adding more cars
}

// Only give particle effects to front/rear cars
switch(FEAT_TRAINS, SELF, switch_br730_2_particles, position_in_articulated_veh % 5) {
	2: visual_effect_and_powered(VISUAL_EFFECT_ELECTRIC	, 2, DISABLE_WAGON_POWER);
	visual_effect_and_powered(VISUAL_EFFECT_DISABLE, 0, DISABLE_WAGON_POWER);
}

// Start/stop switch, used to limit maximum length
switch(FEAT_TRAINS, SELF, switch_br730_2_start_stop, num_vehs_in_consist) {	
	return CB_RESULT_NO_TEXT;   // Allow any length
}

// Only allow the same train type to be added to itself
switch(FEAT_TRAINS, SELF, switch_br730_2_can_attach_wagon, vehicle_type_id) {
	item_br730_2: return CB_RESULT_ATTACH_ALLOW;
	item_br730_0: return CB_RESULT_ATTACH_ALLOW;
	return string(STR_CANNOT_ATTACH);
}


item(FEAT_TRAINS, item_br730_2, 576) {
	property {
		variant_group:					header_Aventra;
		name: string(STR_BR730_2);
		climates_available: ALL_CLIMATES; // available in all climates
		introduction_date: date(2024, 03, 17);
		model_life: VEHICLE_NEVER_EXPIRES; // keep available forever		
		vehicle_life: 30; // years after vehicle is deemed "old" and should be replaced
		reliability_decay: 0; // dont reduce reliabilty, (will grow from 75% upwards over the years)
		refittable_cargo_classes: bitmask(CC_PASSENGERS);
		non_refittable_cargo_classes: bitmask();
		cost_factor: 170;
		loading_speed: 25;
		running_cost_factor: 100;
		cargo_allow_refit: [];
		cargo_disallow_refit: [];
		
		speed: 110 mph;
		power: 4200 hp;
		cargo_capacity: (406/5);
		weight: 330 ton;
		
		sprite_id: SPRITE_ID_NEW_TRAIN; // required
		refit_cost: 0;
		track_type: railtype("ELRL");
		ai_special_flag: AI_FLAG_PASSENGER; // tell ai that this is a passenger train
		running_cost_base: RUNNING_COST_ELECTRIC;
		dual_headed: 0; // set to 0 otherwise limited to 2 cars only
		engine_class: ENGINE_CLASS_ELECTRIC; // even if its 3rd rail, ELECTRIC would give overhead wire effects
		extra_power_per_wagon: 0 kW;
		tractive_effort_coefficient: 0.3;
		air_drag_coefficient: 0.06;
		length: 8; // full tile length vehicle
		visual_effect_and_powered: visual_effect_and_powered(VISUAL_EFFECT_ELECTRIC, 2, DISABLE_WAGON_POWER); // visual fx
		extra_weight_per_wagon: 0 ton;
		bitmask_vehicle_info: 0;
	}
	
	graphics {
		default: switch_br730_2_spriteset;
		purchase: spriteset_br730_2_purchase;
		cargo_subtype_text: switch_br730_2_subtype_text;
		
		articulated_part: switch_br730_2_articulated;
		start_stop: switch_br730_2_start_stop;	
		can_attach_wagon: switch_br730_2_can_attach_wagon;
		visual_effect_and_powered: switch_br730_2_particles;			
		additional_text: string(STR_DSC_BR730_2);
		cargo_capacity:						return(406/5 * param_pax);	
		cost_factor:	return(GetAdjustedCost(170));
		running_cost_factor: return(GetAdjustedCost(100));
	}
}