// If the front of this consist is a compatible locomotive, call that locomotive's remote sprite call switch
switch(FEAT_TRAINS, PARENT, sw_RMTPO_PushPUll, [STORE_TEMP(0 - position_in_articulated_veh, 0x10F), var[0x61, 0, 0x0000FFFF, 0xC6]]) {	
	440: sw_PUSHPULL_DVTasBR47; // Class 47
	sw_RMTPO; // No compatible locomotive found, show normal sprites
}

switch(FEAT_TRAINS, PARENT, sw_RMTPO_CheckDirection,vehicle_is_reversed){
    0:	sw_RMTPO; // We're heading foward, show normal sprites
	1:	sw_RMTPO_PushPUll; // Attempt push pull (skipping check position for now for testing)
}

switch(FEAT_TRAINS, SELF, sw_RMTPO_Sprites, position_in_consist_from_end){
    0: sw_RMTPO_CheckDirection; // Attempt push pull
	sw_RMTPO_Random; // We aren't at the back of theconsist, show normal sprites
}

item (FEAT_TRAINS, item_RMTPO, 483) {
	property {
		name: 							string(STR_NAME_RMTPO);
		climates_available: 			ALL_CLIMATES;
		introduction_date:				date(1963,4,21);
		model_life:						VEHICLE_NEVER_EXPIRES;
		refittable_cargo_classes: 		bitmask(CC_MAIL, CC_EXPRESS, CC_ARMOURED);
		loading_speed:					10;
		cost_factor:					49;
		running_cost_factor:			17;
		power:							0;
		sprite_id:						SPRITE_ID_NEW_TRAIN;
		refit_cost:						0;
		running_cost_base:				RUNNING_COST_DIESEL;
		default_cargo_type:				MAIL;
		cargo_capacity:					50;
		weight:							30 ton;
		length:							8;
		bitmask_vehicle_info:			0;
		cargo_age_period:				185;
	}
	graphics {
	additional_text:					return(string(str_purchase_coach,string(str_RMTPO_liveries)));
	can_attach_wagon:					CB_RESULT_ATTACH_ALLOW;
	default: 							sw_RMTPO; // Switch to sw_RMTPO_Sprites when length changed to 8 for push pull
	purchase:							spriteset_RMTPO_Purchase;
	colour_mapping: 					return PALETTE_CC_FIRST;
	cargo_capacity: return(50);
		cost_factor:	return(GetAdjustedCost(49));
	running_cost_factor: return(GetAdjustedCost(17));
}
}
