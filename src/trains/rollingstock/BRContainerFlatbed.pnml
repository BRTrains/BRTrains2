spriteset(spriteset_BRContainer, "gfx/Freight/Containers.png") {
	template_purchase(0, 0)
}

spriteset(spriteset_BRContainer_Empty, "gfx/Freight/Containers.png") {
	template_train32px(0, 13)
}

spriteset(spriteset_BRContainer_Maersk, "gfx/Freight/Containers.png") {
	template_train32px(0, 39)
}

spriteset(spriteset_BRContainer_Blue, "gfx/Freight/Containers.png") {
	template_train32px(0, 65)
}

spriteset(spriteset_BRContainer_Orange, "gfx/Freight/Containers.png") {
	template_train32px(0, 91)
}

spriteset(spriteset_BRContainer_Green, "gfx/Freight/Containers.png") {
	template_train32px(0, 117)
}

spriteset(spriteset_BRContainer_Purple, "gfx/Freight/Containers.png") {
	template_train32px(0, 143)
}

spriteset(spriteset_BRContainer_Blue2, "gfx/Freight/Containers.png") {
	template_train32px(0, 169)
}

spriteset(spriteset_BRContainer_Red, "gfx/Freight/Containers.png") {
	template_train32px(0, 195)
}

spriteset(spriteset_BRContainer_Yellow, "gfx/Freight/Containers.png") {
	template_train32px(0, 221)
}

spriteset(spriteset_BRContainer_Grey, "gfx/Freight/Containers.png") {
	template_train32px(0, 247)
}

spriteset(spriteset_BRContainer_Black, "gfx/Freight/Containers.png") {
	template_train32px(0, 273)
}

spriteset(spriteset_BRContainer_Tesco, "gfx/Freight/Containers.png") {
	template_train32px(0, 299)
}

random_switch(FEAT_TRAINS, SELF, sw_BRContainer_Random)
{
	2:	spriteset_BRContainer_Maersk; // Maersk is common so double chance
	3:  spriteset_BRContainer_Tesco; // Tesco is very common so triple chance
	1:	spriteset_BRContainer_Blue;
	1:	spriteset_BRContainer_Orange;
	1:	spriteset_BRContainer_Green;
	1:	spriteset_BRContainer_Purple;
	1:	spriteset_BRContainer_Blue2;
	1:	spriteset_BRContainer_Red;
	1:	spriteset_BRContainer_Yellow;
	1:	spriteset_BRContainer_Grey;
	1:	spriteset_BRContainer_Black;
}

// Called third if not using eye candy liveries
// Note some/all liveries may have multiple cargo subtypes, due to eyecandy liveries
switch(FEAT_TRAINS, SELF, sw_BRContainer_Livery, cargo_subtype){    
	2..3:	spriteset_BRContainer_Maersk;
	4..5:	spriteset_BRContainer_Tesco;
	sw_BRContainer_Random;
}

// Called second if using eyecandy liveries
// Display an empty container if near empty, otherwise move to the livery switch
switch(FEAT_TRAINS,SELF, sw_BRContainer_Cargo, cargo_count){	
	0 .. 19: spriteset_BRContainer_Empty;
	20 .. 75: sw_BRContainer_Livery;
}

// Called first
// Skips the "loading stage" switch above if using an eyecandy livery
switch(FEAT_TRAINS, SELF, sw_BRContainer_EyeCandyLiveries, cargo_subtype){	
	3: spriteset_BRContainer_Maersk;
	5: spriteset_BRContainer_Tesco;
	sw_BRContainer_Cargo;
}

switch(FEAT_TRAINS,SELF,sw_BRContainer_cargo_subtype_text,cargo_subtype){
    0:	return string(str_Random);
	1: 	return string(str_RandomEyeCandy);
	2:	return string(str_Maersk);
	3:	return string(str_MaerskEyeCandy);
	4:	return string(str_Tesco);
	5:	return string(str_TescoEyeCandy);

}

item (FEAT_TRAINS, item_BRContainer, 465) {
	property {
		name: 							string(STR_NAME_BRContainer);
		climates_available: 			ALL_CLIMATES;
		introduction_date:				date(1966,1,1);
		model_life:						VEHICLE_NEVER_EXPIRES;
		refittable_cargo_classes:		bitmask(CC_PIECE_GOODS, CC_EXPRESS, CC_HAZARDOUS, CC_REFRIGERATED, CC_NON_POURABLE, CC_NEO_BULK, CC_OVERSIZED);
		cargo_allow_refit:				[GOOD, FISH, FOOD];
		default_cargo_type:				GOOD;
		loading_speed:					20;
		cost_factor:					49;
		running_cost_factor:			17;
		power:							0;
		sprite_id:						SPRITE_ID_NEW_TRAIN;
		refit_cost:						0;
		running_cost_base:				RUNNING_COST_STEAM;
		cargo_capacity:					72;
		weight:							28 ton;
		tractive_effort_coefficient:	0.08;
		air_drag_coefficient:			0.07;
		length:							8;
		bitmask_vehicle_info:			0;
	}
	graphics {
	additional_text:					return(string(str_purchase_coach,string(str_BRContainer_liveries)));
	can_attach_wagon:					CB_RESULT_ATTACH_ALLOW;
	default: 							sw_BRContainer_EyeCandyLiveries;
	purchase:							spriteset_BRContainer;
	colour_mapping: 					return PALETTE_CC_FIRST;
	cargo_subtype_text:					sw_BRContainer_cargo_subtype_text;
		cost_factor:	return(GetAdjustedCost(49));
	running_cost_factor: return(GetAdjustedCost(17));
}
}